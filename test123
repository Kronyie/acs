--[[
  Refactored Multi-Bot (V44 - Fix)

  *** V44 FIX ***
  - Fixed a UI error ("Sensitive is not a valid member") that caused the
    UI to appear blank when switching to the Combat tab.
    The script should now load correctly.

  *** V44 NEW FEATURES ***
  - Added "TP Back on Death: ON/OFF" toggle to the General tab.
  - Added Priority Zone system to the Combat tab.
  - New Combat Logic for Priority Zones.

  *** V43 FIX: Ignore Not Persisting ***
  - Fixed a logic error in findClosestTarget.
  
  *** V42 NEW FEATURE ***
  - Added "10s Auto-Ignore: ON/OFF" toggle button to the General tab.
--]]

-- LAG REDUCTION EDIT: FarmSpeed set to 0.25 (4x/sec) to reduce lag.

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then return end
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse() 

local MultiGrinder = {}
MultiGrinder.__index = MultiGrinder

-- CONFIGURATION

local CONFIG = {
    ScriptName = "Studlands (V44 - Fix)", -- Updated to show it's the fixed version
    DefaultMode = "Combat", 
    FarmSpeed = 0.25, 
    
    -- UI Dimensions
    FrameWidth = 260, 
    TitleBarHeight = 35, 
    TabBarHeight = 30, 
    ContentAreaHeight = 250, 
    MainFrameCornerRadius = 10,
    ButtonHeight = 30, 
    ButtonCornerRadius = 8,
    InputHeight = 30,

    -- Colors
    BackgroundColor = Color3.fromRGB(35, 35, 45), 
    TitleBarColor = Color3.fromRGB(30, 30, 40), 
    TabBarColor = Color3.fromRGB(40, 40, 50), 
    AccentColor = Color3.fromRGB(0, 100, 200), 
    ToggleOnColor = Color3.fromRGB(0, 180, 0), 
    ToggleOffColor = Color3.fromRGB(180, 0, 0), 
    InputBackgroundColor = Color3.fromRGB(50, 50, 60),

    CloseButtonBaseColor = Color3.fromRGB(200, 0, 0), 
    CloseButtonHoverColor = Color3.fromRGB(220, 0, 0), 
    MinimizeButtonBaseColor = Color3.fromRGB(90, 90, 110), 
    MinimizeButtonHoverColor = Color3.fromRGB(120, 120, 140), 

    -- Teleport configuration (Defaults)
    Combat = {
        ToolName = "Unstable Cylindery Hammer", 
        TargetNames = {"Musheynator", "Mushmasher", "Big Mushman", "Mystic Mimic", "Bluecapey", "Cylindery"}, 
        TeleportOffset = Vector3.new(0, 5, 5), 
    },

    Mining = {
        ToolName = "Eternium Pickaxe",
        TargetNames = {"Iron", "Rock", "Blood Stone", "Gold", "Salt Rock"},
        TeleportOffset = Vector3.new(0, 5, 2), 
    },
}

local function getRemotes()
    local remotesContainer = Workspace:FindFirstChild("Remotes") or Workspace
    local remotes = {}
    
    remotes.EquipItem = remotesContainer:WaitForChild("EquipItem", 5) 
    remotes.UseItem = remotesContainer:WaitForChild("UseItem", 5) 

    if remotes.EquipItem then
        print("[Multi-Bot Debug] Remote EquipItem FOUND.")
    else
        warn("[Multi-Bot Debug] Remote: WARNING - EquipItem remote not found.")
    end
    
    if remotes.UseItem then
        print("[Multi-Bot Debug] Remote UseItem FOUND. Using direct fire bypass.")
    else
        warn("[Multi-Bot Debug] Remote: CRITICAL - UseItem remote not found. Bot will likely fail.")
    end

    return remotes
end

-- CONSTRUCTOR & STATE

function MultiGrinder:new()
    local self = setmetatable({
        Enabled = false, 
        Mode = CONFIG.DefaultMode,
        Remotes = getRemotes(),
        MainGui = nil,
        CurrentTab = "General", 
        
        CurrentTarget = nil, 
        CurrentTargetIdentifier = nil, 
        EquippedToolName = nil, 
        
        -- Live Config Variables
        CombatToolName = CONFIG.Combat.ToolName,
        CombatTargetNames = table.concat(CONFIG.Combat.TargetNames, ", "), 
        MiningToolName = CONFIG.Mining.ToolName,
        MiningTargetNames = table.concat(CONFIG.Mining.TargetNames, ", "),
        
        OriginalCameraCFrame = nil, 

        -- Ignored targets
        IgnoredTargets = setmetatable({}, {__mode = "k"}),
        TargetAcquiredTime = nil, 
        AutoIgnoreEnabled = true, 
        
        -- V44: SafetyNet (TP on Death)
        SafetyNetEnabled = true,
        LastDeathCFrame = nil,
        
        -- V44: Priority Zones
        PriorityZones = {}, -- Stores Vector3 positions

        -- Persistent GUI State
        UIPosition = UDim2.new(0.5, -CONFIG.FrameWidth/2, 0.5, -((CONFIG.TitleBarHeight + CONFIG.TabBarHeight + CONFIG.ContentAreaHeight) / 2)),
        IsMinimized = false,
        
    }, MultiGrinder)

    self.InitialFrameHeight = CONFIG.TitleBarHeight + CONFIG.TabBarHeight + CONFIG.ContentAreaHeight
    
    -- CharacterAdded Listener
    LocalPlayer.CharacterAdded:Connect(function(character)
        task.wait(0.5) 
        
        -- State Fixes
        self.EquippedToolName = nil 
        self.CurrentTarget = nil
        self.CurrentTargetIdentifier = nil 
        self.TargetAcquiredTime = nil 
        print("[Multi-Bot Debug] Character respawned. EquippedToolName reset to force re-equip.")
        
        -- V44: SafetyNet (Teleport back on death)
        if self.SafetyNetEnabled and self.LastDeathCFrame then
            local newHrp = character:WaitForChild("HumanoidRootPart", 5)
            if newHrp then
                print("[Multi-Bot Debug] SafetyNet: Teleporting back to last location.")
                newHrp.CFrame = self.LastDeathCFrame
            end
            self.LastDeathCFrame = nil -- Clear it after use
        end

        -- V44: Add 'Died' listener to the new character's humanoid
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.Died:Connect(function()
            if character and character:FindFirstChild("HumanoidRootPart") then
                print("[Multi-Bot Debug] SafetyNet: Storing death location.")
                self.LastDeathCFrame = character.HumanoidRootPart.CFrame
            end
        end)
        
        -- GUI Persistence Fix
        local playerGui = LocalPlayer:WaitForChild("PlayerGui")
        if not playerGui:FindFirstChild("MultiBotGui") then
            print("[Multi-Bot Debug] GUI missing after respawn, re-initializing GUI and restoring state.")
            self:setupGUI()
            self:updateGUI() 
        end
    end)
    
    -- V44: Add 'Died' listener for the *current* character
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
             humanoid.Died:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    print("[Multi-Bot Debug] SafetyNet: Storing death location (initial character).")
                    self.LastDeathCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end)
        end
    end

    return self
end

-- CORE HANDLERS

function MultiGrinder:getHumanoidRootPart()
    local char = LocalPlayer.Character
    if not char then 
        return nil 
    end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    return hrp
end

function MultiGrinder:getTargetNames(mode)
    local targetString = (mode == "Combat") and self.CombatTargetNames or self.MiningTargetNames
    local names = {}
    for name in string.gmatch(targetString, "[^,]+") do
        local trimmedName = name:gsub("^%s*(.-)%s*$", "%1")
        names[#names + 1] = trimmedName 
    end
    return names
end

function MultiGrinder:findClosestTarget(position, names)
    local closestTargetPart = nil 
    local closestTargetKey = nil 
    local minDistance = math.huge
    local searchRadius = math.huge 

    for _, obj in ipairs(Workspace:GetDescendants()) do
        for _, name in ipairs(names) do
            if string.lower(obj.Name) == string.lower(name) then 
                
                local targetPart = obj:IsA("BasePart") and obj or obj:FindFirstChild("HumanoidRootPart")
                local targetKey = nil
                
                if targetPart then 
                    local parentModel = targetPart.Parent
                    local humanoid = parentModel:FindFirstChildOfClass("Humanoid")

                    if humanoid then
                        targetKey = parentModel
                    else
                        targetKey = targetPart
                    end
                end

                if targetPart and targetKey and targetPart.Position and targetPart.Parent ~= LocalPlayer.Character then
                    
                    if self.IgnoredTargets[targetKey] then
                        continue 
                    end

                    local dist = (targetPart.Position - position).Magnitude
                    
                    if dist < searchRadius and dist < minDistance then
                        minDistance = dist
                        closestTargetPart = targetPart 
                        closestTargetKey = targetKey 
                    end
                end
            end
        end
    end
    
    return closestTargetPart, closestTargetKey
end

-- V44: NEW FUNCTION to find priority targets
function MultiGrinder:findPriorityTarget()
    local playerHrp = self:getHumanoidRootPart()
    if not playerHrp then return nil, nil end
    
    -- Iterate through zones in the order they were added
    for i, zonePosition in ipairs(self.PriorityZones) do
        
        local closestPriorityTargetPart = nil
        local closestPriorityTargetKey = nil
        local minDistance = math.huge -- Find closest to player *within* this priority zone
        
        -- Scan all descendants for mobs within this zone
        for _, obj in ipairs(Workspace:GetDescendants()) do
            local humanoid = obj:FindFirstChildOfClass("Humanoid")
            
            -- Check if it's a valid, living mob
            if humanoid and humanoid.Health > 0 and obj:FindFirstChild("HumanoidRootPart") then
                
                local targetPart = obj:FindFirstChild("HumanoidRootPart")
                local targetKey = obj -- The Model is the key
                
                if targetKey == LocalPlayer.Character then
                    continue
                end

                if self.IgnoredTargets[targetKey] then
                    continue
                end
                
                local distFromZoneCenter = (targetPart.Position - zonePosition).Magnitude
                
                -- Check if it's inside the 10-stud radius
                if distFromZoneCenter <= 10 then
                    
                    local distFromPlayer = (targetPart.Position - playerHrp.Position).Magnitude
                    
                    if distFromPlayer < minDistance then
                        minDistance = distFromPlayer
                        closestPriorityTargetPart = targetPart
                        closestPriorityTargetKey = targetKey
                    end
                end
            end
        end
        
        -- If we found a target in this zone (priority 'i'), return it immediately.
        if closestPriorityTargetPart then
            return closestPriorityTargetPart, closestPriorityTargetKey
        end
    end
    
    -- No priority targets found in any zone
    return nil, nil
end

-- simulateAction function

function MultiGrinder:simulateAction(toolName)
    local char = LocalPlayer.Character
    local remotes = self.Remotes
    
    if not char or not remotes.UseItem then return end

    local toolInstance = char:FindFirstChild(toolName) or LocalPlayer.Backpack:FindFirstChild(toolName)

    if toolInstance then
        remotes.UseItem:FireServer(toolInstance, false)
    else
        warn(string.format("[Multi-Bot Debug] CRITICAL FAILURE: Tool Instance (%s) not found in Character OR Backpack. Check tool name configuration.", toolName))
    end
end

local function restoreCamera(self)
    if self.OriginalCameraCFrame then 
        Camera.CFrame = self.OriginalCameraCFrame 
        self.OriginalCameraCFrame = nil 
    end
end

-- V44: REFACTORED executeCombatAction
function MultiGrinder:executeCombatAction(hrp)
    local toolName = self.CombatToolName
    local remotes = self.Remotes
    
    -- 1. --- CHECK FOR PRIORITY TARGETS ---
    local priorityTargetPart, priorityTargetKey = self:findPriorityTarget()

    if priorityTargetPart then
        -- We have a priority target.
        if self.CurrentTarget ~= priorityTargetPart then
            print(string.format("[Multi-Bot Debug] PRIORITY TARGET ACQUIRED: %s", priorityTargetKey.Name))
            self.CurrentTarget = priorityTargetPart
            self.CurrentTargetIdentifier = priorityTargetKey
            self.TargetAcquiredTime = os.clock() 
            self:updateGUI()
        end
    else
        -- No priority targets. Proceed with normal logic.
        
        -- 2. --- CHECK CURRENT NORMAL TARGET ---
        local target = self.CurrentTarget
        local isPriority = false 
        if target then
             for _, zonePosition in ipairs(self.PriorityZones) do
                 if (target.Position - zonePosition).Magnitude <= 10 then
                     isPriority = true
                     break
                 end
             end
        end

        local needsNewTarget = not target or not target.Parent or not target.Parent:FindFirstChildOfClass("Humanoid") or target.Parent:FindFirstChildOfClass("Humanoid").Health <= 0
        
        if needsNewTarget or isPriority then
            local targetNames = self:getTargetNames("Combat")
            local newTarget, newTargetKey = self:findClosestTarget(hrp.Position, targetNames)
            
            if not newTarget then 
                self.CurrentTarget = nil 
                self.CurrentTargetIdentifier = nil 
                self.TargetAcquiredTime = nil 
                restoreCamera(self) 
                self:updateGUI() 
                return false 
            end
            
            self.CurrentTarget = newTarget
            self.CurrentTargetIdentifier = newTargetKey
            self.TargetAcquiredTime = os.clock() 
            self:updateGUI() 
        end
    end

    -- 3. --- AUTO-IGNORE LOGIC ---
    if self.AutoIgnoreEnabled and self.CurrentTarget and self.TargetAcquiredTime and (os.clock() - self.TargetAcquiredTime > 10) then
        local humanoid = self.CurrentTarget.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.Health > 0 then
            local targetName = self.CurrentTarget.Parent and self.CurrentTarget.Parent.Name or self.CurrentTarget.Name
            print(string.format("[Multi-Bot Debug] Target %s alive for > 10s. Auto-ignoring.", targetName))
            
            if self.CurrentTargetIdentifier then
                self.IgnoredTargets[self.CurrentTargetIdentifier] = true 
            end
            
            self.CurrentTarget = nil 
            self.CurrentTargetIdentifier = nil 
            self.TargetAcquiredTime = nil
            restoreCamera(self)
            self:updateGUI()
            return false 
        else
            self.TargetAcquiredTime = nil 
        end
    end

    -- 4. --- ATTACK SEQUENCE ---
    if not self.CurrentTarget then
        restoreCamera(self)
        self:updateGUI()
        return false
    end

    local char = LocalPlayer.Character
    if not char then return false end
    
    -- 5. --- EQUIP TOOL ---
    local equippedTool = char:FindFirstChild(toolName)
    
    if not equippedTool and remotes.EquipItem then
        print(string.format("[Multi-Bot Debug] Equipping tool: %s", toolName))
        remotes.EquipItem:InvokeServer(toolName)
        
        equippedTool = char:WaitForChild(toolName, 1.0)
        
        if equippedTool then
            print(string.format("[Multi-Bot Debug] Equip SUCCESS: %s located in character.", toolName))
            self.EquippedToolName = toolName 
        else
            warn(string.format("[Multi-Bot Debug] Equip FAILED: %s did not appear in character after 1s.", toolName))
            self.EquippedToolName = nil 
            return false 
        end
    end
    
    -- 6. --- TELEPORT AND ATTACK ---
    local target = self.CurrentTarget 
    local offset = CONFIG.Combat.TeleportOffset
    local targetPos = target.Position + offset
    hrp.CFrame = CFrame.new(targetPos)
    
    if Camera and target and target.Position then 
        if not self.OriginalCameraCFrame then
            self.OriginalCameraCFrame = Camera.CFrame 
        end
        
        local targetCFrame = CFrame.new(target.Position)
        Camera.CFrame = CFrame.new(targetCFrame.p + (targetCFrame.LookVector * -5) + Vector3.new(0, 2, 0), targetCFrame.p)

        self:simulateAction(toolName)
    else
        warn("[Multi-Bot Debug] Target or Camera was invalid during attack sequence.")
        restoreCamera(self) 
    end

    return true
end

function MultiGrinder:executeMiningAction(hrp)
    local toolName = self.MiningToolName
    local remotes = self.Remotes
    local resource = self.CurrentTarget

    local needsNewTarget = not resource or not resource.Parent

    if needsNewTarget then
        local targetNames = self:getTargetNames("Mining")
        
        local newResource, newResourceKey = self:findClosestTarget(hrp.Position, targetNames)
        
        if not newResource then 
            self.CurrentTarget = nil
            self.CurrentTargetIdentifier = nil 
            restoreCamera(self) 
            self:updateGUI() 
            return false 
        end
        
        self.CurrentTarget = newResource
        self.CurrentTargetIdentifier = newResourceKey 
        resource = self.CurrentTarget
        self:updateGUI() 
    end
    
    local char = LocalPlayer.Character
    if not char then return false end
    
    local equippedTool = char:FindFirstChild(toolName)
    
    if not equippedTool and remotes.EquipItem then
        print(string.format("[Multi-Bot Debug] Equipping tool: %s", toolName))
        remotes.EquipItem:InvokeServer(toolName)
        
        equippedTool = char:WaitForChild(toolName, 1.0)
        
        if equippedTool then
            print(string.format("[Multi-Bot Debug] Equip SUCCESS: %s located in character.", toolName))
            self.EquippedToolName = toolName 
        else
            warn(string.format("[Multi-Bot Debug] Equip FAILED: %s did not appear in character after 1s.", toolName))
            self.EquippedToolName = nil 
            return false 
        end
    end
    
    local offset = CONFIG.Mining.TeleportOffset
    local resourcePos = resource.Position + offset
    hrp.CFrame = CFrame.new(resourcePos)
    
    if Camera and resource and resource.Position then 
        if not self.OriginalCameraCFrame then
            self.OriginalCameraCFrame = Camera.CFrame 
        end

        local resourceCFrame = CFrame.new(resource.Position)
        Camera.CFrame = CFrame.new(resourceCFrame.p + (resourceCFrame.LookVector * -5) + Vector3.new(0, 2, 0), resourceCFrame.p)
        
        self:simulateAction(toolName)
    else
        warn("[Multi-Bot Debug] Resource or Camera was invalid during mining sequence.")
        restoreCamera(self) 
    end
    
    return true
end

-- GUI LOGIC & COMPONENTS

function MultiGrinder:setMinimizedState(isMinimized)
    self.IsMinimized = isMinimized
    
    if not self.MainGui or not self.MainGui.MainFrame then return end

    local MainFrame = self.MainGui.MainFrame
    local ContentContainer = MainFrame:FindFirstChild("ContentContainer")
    local TabBar = MainFrame:FindFirstChild("TabBar")
    
    if not ContentContainer or not TabBar or not self.MainGui.MinimizeButton then return end

    
    ContentContainer.Visible = not isMinimized
    TabBar.Visible = not isMinimized
    
    if isMinimized then
        MainFrame:TweenSize(UDim2.new(0, CONFIG.FrameWidth, 0, CONFIG.TitleBarHeight), "Out", "Quad", 0.2, true)
        self.MainGui.MinimizeButton.Text = "□" 
    else
        MainFrame:TweenSize(UDim2.new(0, CONFIG.FrameWidth, 0, self.InitialFrameHeight), "Out", "Quad", 0.2, true)
        self.MainGui.MinimizeButton.Text = "\u{2014}" 
    end
end

function MultiGrinder:updateGUI()
    if not self.MainGui then return end
    
    -- General Page
    local toggleButton = self.MainGui.GeneralPage.ToggleButton
    local modeButton = self.MainGui.GeneralPage.ModeButton
    local ignoreButton = self.MainGui.GeneralPage.IgnoreButton 
    local autoIgnoreButton = self.MainGui.GeneralPage.AutoIgnoreButton 
    local safetyNetButton = self.MainGui.GeneralPage.SafetyNetButton -- V44
    
    if self.Enabled then
        toggleButton.Text = "ON"
        toggleButton.BackgroundColor3 = CONFIG.ToggleOnColor
    else
        toggleButton.Text = "OFF"
        toggleButton.BackgroundColor3 = CONFIG.ToggleOffColor
    end
    
    -- Update Ignore Button
    if self.Enabled then
        ignoreButton.Visible = true
        
        local identifier = self.CurrentTargetIdentifier
        if identifier then
            local targetName = identifier.Name
            ignoreButton.Text = string.format("IGNORE THIS: %s", targetName)
            ignoreButton.BackgroundColor3 = Color3.fromRGB(150, 0, 200) 
        else
            ignoreButton.Text = "No Target to Ignore"
            ignoreButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80) 
        end
    else
        ignoreButton.Visible = false
    end

    -- Update Auto-Ignore Button
    if self.AutoIgnoreEnabled then
        autoIgnoreButton.Text = "10s Auto-Ignore: ON"
        autoIgnoreButton.BackgroundColor3 = CONFIG.ToggleOnColor
    else
        autoIgnoreButton.Text = "10s Auto-Ignore: OFF"
        autoIgnoreButton.BackgroundColor3 = CONFIG.ToggleOffColor
    end

    -- Update SafetyNet Button
    if self.SafetyNetEnabled then
        safetyNetButton.Text = "TP Back on Death: ON"
        safetyNetButton.BackgroundColor3 = CONFIG.ToggleOnColor
    else
        safetyNetButton.Text = "TP Back on Death: OFF"
        safetyNetButton.BackgroundColor3 = CONFIG.ToggleOffColor
    end

    local currentToolName = (self.Mode == "Combat") and self.CombatToolName or self.MiningToolName
    local modeDisplayName = (self.Mode == "Combat") and "Attacking" or "Mining"
    modeButton.Text = modeDisplayName .. " ("..currentToolName..")"
    
    -- Tabs
    for tabName, tabButton in pairs(self.MainGui.Tabs) do
        if tabName == self.CurrentTab then
            tabButton.BackgroundColor3 = CONFIG.BackgroundColor 
            tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        else
            tabButton.BackgroundColor3 = CONFIG.TabBarColor 
            tabButton.TextColor3 = Color3.fromRGB(150, 150, 150)
        end
    end
    
    -- V44: Combat Page (Priority Zones)
    if self.MainGui.CombatPage.PriorityZoneLabel then
        local label = self.MainGui.CombatPage.PriorityZoneLabel
        local button = self.MainGui.CombatPage.SetPriorityZoneButton
        local zoneCount = #self.PriorityZones
        
        label.Text = string.format("Priority Zones: %d / 15", zoneCount)
        
        local isFull = (zoneCount >= 15)
        -- *** THIS IS THE FIX ***
        -- Replaced 'Sensitive' and 'Active' with 'AutoButtonColor', which is a valid TextButton property.
        button.AutoButtonColor = not isFull -- FIX: Disables button visual feedback when full
        button.BackgroundColor3 = isFull and Color3.fromRGB(80, 80, 80) or CONFIG.AccentColor
        button.Text = isFull and "Priority Zones Full (15/15)" or "Set Priority Zone (at HRP)"
    end
end

function MultiGrinder:showTab(tabName)
    self.CurrentTab = tabName
    self:updateGUI()
    
    local contentContainer = self.MainGui.MainFrame:FindFirstChild("ContentContainer")
    if not contentContainer then return end

    for _, page in pairs(contentContainer:GetChildren()) do
        if page:IsA("Frame") and page.Name:match("Page$") then
            page.Visible = false
        end
    end
    
    if self.MainGui.Pages[tabName] then
        self.MainGui.Pages[tabName].Visible = true
    end
end

local function createInputLabel(parent, text, layoutOrder)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Text = text
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = parent
    label.LayoutOrder = layoutOrder
    return label
end

local function createTextBox(parent, initialText, placeholder, layoutOrder)
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(0.9, 0, 0, CONFIG.InputHeight)
    textBox.Text = initialText
    textBox.PlaceholderText = placeholder or ""
    textBox.PlaceholderColor3 = Color3.fromRGB(120, 120, 120)
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.BackgroundColor3 = CONFIG.InputBackgroundColor
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.Parent = parent
    textBox.BorderSizePixel = 0
    textBox.LayoutOrder = layoutOrder
    Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, CONFIG.ButtonCornerRadius)
    return textBox
end

local function createButton(parent, text, color, layoutOrder)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.9, 0, 0, CONFIG.ButtonHeight) 
    button.Text = text
    button.BackgroundColor3 = color or CONFIG.ToggleOffColor
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Parent = parent
    button.BorderSizePixel = 0
    button.LayoutOrder = layoutOrder
    Instance.new("UICorner", button).CornerRadius = UDim.new(0, CONFIG.ButtonCornerRadius)
    return button
end

local function createListLayout(parent)
    local ListLayout = Instance.new("UIListLayout", parent)
    ListLayout.Padding = UDim.new(0, 10) 
    ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.FillDirection = Enum.FillDirection.Vertical
    return ListLayout
end

local function createContentPage(parent, name)
    local page = Instance.new("Frame")
    page.Name = name .. "Page"
    page.Size = UDim2.new(1, 0, 1, 0)
    page.BackgroundTransparency = 1 
    page.Visible = false
    page.Parent = parent
    
    -- Add padding to the page itself
    local Padding = Instance.new("UIPadding", page)
    Padding.PaddingTop = UDim.new(0, 10)
    
    return page
end

function MultiGrinder:setupGUI()
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
    if playerGui:FindFirstChild("MultiBotGui") then playerGui.MultiBotGui:Destroy() end

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "MultiBotGui"
    ScreenGui.Parent = playerGui

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, CONFIG.FrameWidth, 0, self.InitialFrameHeight) 
    MainFrame.Position = self.UIPosition 
    MainFrame.BackgroundColor3 = CONFIG.BackgroundColor
    MainFrame.BorderColor3 = Color3.fromRGB(15, 15, 20)
    MainFrame.BorderSizePixel = 1
    MainFrame.Parent = ScreenGui
    Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, CONFIG.MainFrameCornerRadius)
    
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, CONFIG.TitleBarHeight)
    TitleBar.BackgroundColor3 = CONFIG.TitleBarColor
    TitleBar.Parent = MainFrame
    TitleBar.BorderSizePixel = 0
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Position = UDim2.new(0, 8, 0, 0)
    TitleLabel.Size = UDim2.new(1, -70, 1, 0) 
    TitleLabel.Text = CONFIG.ScriptName 
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 18 
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.TextWrapped = true
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Parent = TitleBar
    
    local controlSize = CONFIG.TitleBarHeight - 18 
    local controlTextSize = 14 
    
    local function createControl(text, color, name, anchorX)
        local btn = Instance.new("TextButton")
        btn.Name = name
        btn.Size = UDim2.new(0, controlSize, 0, controlSize) 
        btn.Text = text
        btn.TextSize = controlTextSize 
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.BackgroundColor3 = color 
        btn.Parent = TitleBar
        btn.BorderSizePixel = 0
        btn.AnchorPoint = Vector2.new(anchorX, 0.5)
        btn.Position = UDim2.new(anchorX, 0, 0.5, 0)
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 4)
        return btn
    end

    local buttonSpacing = 5 
    local buttonSize = controlSize 

    local CloseButton = createControl("X", CONFIG.CloseButtonBaseColor, "CloseButton", 1)
    CloseButton.Position = UDim2.new(1, -buttonSpacing, 0.5, 0)
    
    local MinimizeButton = createControl("\u{2014}", CONFIG.MinimizeButtonBaseColor, "MinimizeButton", 1) 
    MinimizeButton.Position = UDim2.new(1, -(buttonSpacing + buttonSize + buttonSpacing), 0.5, 0)

    MinimizeButton.MouseEnter:Connect(function()
        MinimizeButton.BackgroundColor3 = CONFIG.MinimizeButtonHoverColor
    end)
    MinimizeButton.MouseLeave:Connect(function()
        MinimizeButton.BackgroundColor3 = CONFIG.MinimizeButtonBaseColor
    end)
    CloseButton.MouseEnter:Connect(function()
        CloseButton.BackgroundColor3 = CONFIG.CloseButtonHoverColor
    end)
    CloseButton.MouseLeave:Connect(function()
        CloseButton.BackgroundColor3 = CONFIG.CloseButtonBaseColor
    end)
    
    local dragging = false
    local dragStart = Vector2.new(0, 0)
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
        end
    end)
    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePosition = UserInputService:GetMouseLocation() 
            MainFrame.Position = UDim2.fromOffset(
                mousePosition.X - dragStart.X,
                mousePosition.Y - dragStart.Y
            )
            self.UIPosition = MainFrame.Position
        end
    end)
    
    local TabBar = Instance.new("Frame")
    TabBar.Position = UDim2.new(0, 0, 0, CONFIG.TitleBarHeight)
    TabBar.Size = UDim2.new(1, 0, 0, CONFIG.TabBarHeight)
    TabBar.BackgroundColor3 = CONFIG.TabBarColor 
    TabBar.Parent = MainFrame
    TabBar.BorderSizePixel = 0
    
    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    TabLayout.Parent = TabBar

    local TabNames = {"General", "Combat", "Mining"} 
    local Tabs = {}
    
    for _, tabName in ipairs(TabNames) do
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tabName .. "Tab"
        tabButton.Size = UDim2.new(1/#TabNames, 0, 1, 0)
        tabButton.Text = tabName
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextColor3 = Color3.fromRGB(150, 150, 150)
        tabButton.BackgroundColor3 = CONFIG.TabBarColor 
        tabButton.Parent = TabBar
        tabButton.BorderSizePixel = 0
        
        tabButton.MouseButton1Click:Connect(function()
            self:showTab(tabName)
        end)
        Tabs[tabName] = tabButton
    end
    
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Position = UDim2.new(0, 0, 0, CONFIG.TitleBarHeight + CONFIG.TabBarHeight) 
    ContentContainer.Size = UDim2.new(1, 0, 1, -(CONFIG.TitleBarHeight + CONFIG.TabBarHeight))
    ContentContainer.BackgroundColor3 = CONFIG.BackgroundColor
    ContentContainer.Parent = MainFrame
    ContentContainer.BorderSizePixel = 0
    
    local Pages = {}

    local GeneralPage = createContentPage(ContentContainer, "General")
    local GeneralLayout = createListLayout(GeneralPage)
    GeneralLayout.Padding = UDim.new(0, 8) 
    
    local ToggleButton = createButton(GeneralPage, "OFF", CONFIG.ToggleOffColor, 1) 
    ToggleButton.Name = "ToggleButton"
    ToggleButton.MouseButton1Click:Connect(function()
        self.Enabled = not self.Enabled
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        self.EquippedToolName = nil
        self.TargetAcquiredTime = nil 
        if not self.Enabled then
            restoreCamera(self) 
        end
        self:updateGUI()
        print(string.format("[Multi-Bot Debug] Bot Toggled: %s", self.Enabled and "ON" or "OFF"))
    end)

    local initialModeText
    local currentToolName = (self.Mode == "Combat") and self.CombatToolName or self.MiningToolName
    local modeDisplayName = (self.Mode == "Combat") and "Attacking" or "Mining"
    initialModeText = modeDisplayName .. " ("..currentToolName..")"
    
    local ModeButton = createButton(GeneralPage, initialModeText, CONFIG.AccentColor, 2)
    ModeButton.Name = "ModeButton"
    ModeButton.MouseButton1Click:Connect(function()
        self.Mode = (self.Mode == "Combat" and "Mining" or "Combat")
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        self.EquippedToolName = nil
        self.TargetAcquiredTime = nil 
        restoreCamera(self)
        self:updateGUI()
        print(string.format("[Multi-Bot Debug] Mode changed to: %s", self.Mode))
    end)

    local IgnoreButton = createButton(GeneralPage, "No Target to Ignore", Color3.fromRGB(80, 80, 80), 3)
    IgnoreButton.Name = "IgnoreButton"
    IgnoreButton.Visible = false 
    IgnoreButton.MouseButton1Click:Connect(function()
        if self.Enabled and self.CurrentTargetIdentifier then 
            local targetIdentifier = self.CurrentTargetIdentifier
            local targetName = targetIdentifier.Name
            
            self.IgnoredTargets[targetIdentifier] = true 
            print(string.format("[Multi-Bot Debug] IGNORED TARGET: %s (Instance added to set)", targetName))
            
            self.CurrentTarget = nil 
            self.CurrentTargetIdentifier = nil 
            self.TargetAcquiredTime = nil 
            restoreCamera(self)
            self:updateGUI()
        else
            print("[Multi-Bot Debug] Cannot ignore: Bot is off or no target is selected.")
        end
    end)

    local ClearIgnoreButton = createButton(GeneralPage, "Clear Ignore List", Color3.fromRGB(220, 120, 0), 4) 
    ClearIgnoreButton.Name = "ClearIgnoreButton"
    ClearIgnoreButton.MouseButton1Click:Connect(function()
        self.IgnoredTargets = setmetatable({}, {__mode = "k"})
        print("[Multi-Bot Debug] Manually cleared ignore list.")
        
        if self.CurrentTargetIdentifier and self.IgnoredTargets[self.CurrentTargetIdentifier] then
            self.CurrentTarget = nil
            self.CurrentTargetIdentifier = nil
            restoreCamera(self)
        end
        self:updateGUI()
    end)
    
    local AutoIgnoreButton = createButton(GeneralPage, "10s Auto-Ignore: ON", CONFIG.ToggleOnColor, 5)
    AutoIgnoreButton.Name = "AutoIgnoreButton"
    AutoIgnoreButton.MouseButton1Click:Connect(function()
        self.AutoIgnoreEnabled = not self.AutoIgnoreEnabled
        self:updateGUI()
        print(string.format("[Multi-Bot Debug] Auto-Ignore Toggled: %s", self.AutoIgnoreEnabled and "ON" or "OFF"))
    end)
    
    local SafetyNetButton = createButton(GeneralPage, "TP Back on Death: ON", CONFIG.ToggleOnColor, 6)
    SafetyNetButton.Name = "SafetyNetButton"
    SafetyNetButton.MouseButton1Click:Connect(function()
        self.SafetyNetEnabled = not self.SafetyNetEnabled
        self:updateGUI()
        print(string.format("[Multi-Bot Debug] SafetyNet Toggled: %s", self.SafetyNetEnabled and "ON" or "OFF"))
    end)


    Pages["General"] = GeneralPage
    
    local CombatPage = createContentPage(ContentContainer, "Combat")
    local CombatLayout = createListLayout(CombatPage)
    CombatLayout.Padding = UDim.new(0, 5) 
    
    createInputLabel(CombatPage, "Attack Weapon/Tool Name:", 1)
    local CToolNameInput = createTextBox(CombatPage, self.CombatToolName, "E.g., Clockwork Hammer", 2)
    CToolNameInput.Name = "CToolNameInput"
    CToolNameInput.FocusLost:Connect(function(enterPressed)
        self.CombatToolName = CToolNameInput.Text
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        self.EquippedToolName = nil
        self:updateGUI() 
        print(string.format("[Multi-Bot Debug] Combat Tool updated: %s", self.CombatToolName))
    end)
    
    createInputLabel(CombatPage, "Target Names (comma-separated):", 3)
    local CTargetNamesInput = createTextBox(CombatPage, self.CombatTargetNames, "E.g., Cavey, Bonezos", 4)
    CTargetNamesInput.Name = "CTargetNamesInput"
    CTargetNamesInput.FocusLost:Connect(function(enterPressed)
        self.CombatTargetNames = CTargetNamesInput.Text
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        print(string.format("[Multi-Bot Debug] Combat Targets updated: %s", self.CombatTargetNames))
    end)
    
    -- V44: Priority Zone UI
    local PriorityZoneLabel = Instance.new("TextLabel")
    PriorityZoneLabel.Name = "PriorityZoneLabel"
    PriorityZoneLabel.Size = UDim2.new(0.9, 0, 0, 20)
    PriorityZoneLabel.Text = string.format("Priority Zones: %d / 15", #self.PriorityZones)
    PriorityZoneLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    PriorityZoneLabel.Font = Enum.Font.Gotham
    PriorityZoneLabel.TextSize = 14
    PriorityZoneLabel.BackgroundTransparency = 1
    PriorityZoneLabel.TextXAlignment = Enum.TextXAlignment.Center
    PriorityZoneLabel.Parent = CombatPage
    PriorityZoneLabel.LayoutOrder = 5
    
    local SetPriorityZoneButton = createButton(CombatPage, "Set Priority Zone (at HRP)", CONFIG.AccentColor, 6)
    SetPriorityZoneButton.Name = "SetPriorityZoneButton"
    SetPriorityZoneButton.MouseButton1Click:Connect(function()
        if #self.PriorityZones < 15 then
            local hrp = self:getHumanoidRootPart()
            if hrp then
                table.insert(self.PriorityZones, hrp.Position)
                print(string.format("[Multi-Bot Debug] Priority Zone %d set at %s", #self.PriorityZones, tostring(hrp.Position)))
                self:updateGUI()
            else
                print("[Multi-Bot Debug] Could not set zone: Player HRP not found.")
            end
        else
            print("[Multi-Bot Debug] Cannot set zone: Max (15) zones reached.")
        end
    end)
    
    local ClearPriorityZonesButton = createButton(CombatPage, "Clear All Priority Zones", CONFIG.ToggleOffColor, 7)
    ClearPriorityZonesButton.Name = "ClearPriorityZonesButton"
    ClearPriorityZonesButton.MouseButton1Click:Connect(function()
        self.PriorityZones = {}
        print("[Multi-Bot Debug] All Priority Zones cleared.")
        self:updateGUI()
    end)


    Pages["Combat"] = CombatPage
    
    local MiningPage = createContentPage(ContentContainer, "Mining")
    local MiningLayout = createListLayout(MiningPage)
    MiningLayout.Padding = UDim.new(0, 5) 
    
    createInputLabel(MiningPage, "Mining Tool Name:", 1)
    local MToolNameInput = createTextBox(MiningPage, self.MiningToolName, "E.g., Eternium Pickaxe", 2)
    MToolNameInput.Name = "MToolNameInput"
    MToolNameInput.FocusLost:Connect(function(enterPressed)
        self.MiningToolName = MToolNameInput.Text
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        self.EquippedToolName = nil
        self:updateGUI()
        print(string.format("[Multi-Bot Debug] Mining Tool updated: %s", self.MiningToolName))
    end)
    
    createInputLabel(MiningPage, "Resource Names (comma-separated):", 3)
    local MTargetNamesInput = createTextBox(MiningPage, self.MiningTargetNames, "E.g., Iron, Rock, Gold", 4)
    MTargetNamesInput.Name = "MTargetNamesInput"
    MTargetNamesInput.FocusLost:Connect(function(enterPressed)
        self.MiningTargetNames = MTargetNamesInput.Text
        self.CurrentTarget = nil 
        self.CurrentTargetIdentifier = nil 
        print(string.format("[Multi-Bot Debug] Mining Targets updated: %s", self.MiningTargetNames))
    end)
    
    local MRangeLabel = Instance.new("TextLabel")
    MRangeLabel.Text = "Search Range: Full Map (Continuous Mining)"
    MRangeLabel.Size = UDim2.new(1, 0, 0, 20)
    MRangeLabel.BackgroundTransparency = 1
    MRangeLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    MRangeLabel.Font = Enum.Font.Gotham
    MRangeLabel.TextSize = 12
    MRangeLabel.TextXAlignment = Enum.TextXAlignment.Center
    MRangeLabel.Parent = MiningPage
    MRangeLabel.LayoutOrder = 5

    Pages["Mining"] = MiningPage

    self.MainGui = {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        MinimizeButton = MinimizeButton,
        Tabs = Tabs,
        Pages = Pages,
        GeneralPage = {
            ToggleButton = ToggleButton,
            ModeButton = ModeButton,
            IgnoreButton = IgnoreButton, 
            ClearIgnoreButton = ClearIgnoreButton, 
            AutoIgnoreButton = AutoIgnoreButton, 
            SafetyNetButton = SafetyNetButton, -- V44
        },
        CombatPage = {
            ToolNameInput = CToolNameInput,
            TargetNamesInput = CTargetNamesInput,
            PriorityZoneLabel = PriorityZoneLabel, -- V44
            SetPriorityZoneButton = SetPriorityZoneButton, -- V44
            ClearPriorityZonesButton = ClearPriorityZonesButton, -- V44
        },
        MiningPage = {
            ToolNameInput = MToolNameInput,
            TargetNamesInput = MTargetNamesInput,
        }
    }

    MinimizeButton.MouseButton1Click:Connect(function()
        self:setMinimizedState(not self.IsMinimized)
    end)

    CloseButton.MouseButton1Click:Connect(function()
        if self.LoopThread then task.cancel(self.LoopThread) end
        restoreCamera(self)
        ScreenGui:Destroy()
        print("[Multi-Bot Debug] Bot script shut down.")
    end)
    
    self:setMinimizedState(self.IsMinimized)
    self:showTab(self.CurrentTab)
end

-- MAIN LOOP

function MultiGrinder:start()
    self:setupGUI()
    print("[Multi-Bot Debug] GUI Initialized. Starting main loop.")
    
    self.LoopThread = task.spawn(function()
        while task.wait(CONFIG.FarmSpeed) do
            if self.Enabled then
                local hrp = self:getHumanoidRootPart()
                
                if not hrp then 
                    -- print("[Multi-Bot Debug] Waiting for character HRP...")
                    continue 
                end
                
                if self.Mode == "Combat" then
                    self:executeCombatAction(hrp)
                elseif self.Mode == "Mining" then
                    self:executeMiningAction(hrp)
                end
            end
        end
    end)
end

-- SCRIPT EXECUTION

pcall(function()
    local bot = MultiGrinder:new()
    bot:start()
end)
