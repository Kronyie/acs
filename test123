--[[
  Refactored Multi-Bot (V44 - Equal Priority Targeting - Reduced Area)
  
  *** V44 CHANGES / FIXES ***
  - Logic Update: Removed "first-to-last" priority ordering for all target name lists.
    - All mobs matching any name in the 'Target Names' list are now treated with equal priority.
    - This also applies to 'Priority Mob Names'.
  - Area Update: Reduced Priority Area radius from 50 to 25.
  - Fix: Improved Ignored Mob Logic.
    - Targeting logic now strictly respects the 'IgnoredMobs' list. Mobs added to this list (manually or due to combat failure) will not be targeted again until the list is explicitly cleared or the mob is killed by other means.
    
  *** V43 NEW FEATURES (Retained) ***
  - Feature: Text Box Priority Targeting.
  - Feature: Priority Area Targeting (Combat Tab) - NOW SUPPORTS MULTIPLE AREAS!
    - Added "Area Priority: ON/OFF" toggle to the Combat tab.
    - Added "Priority Mob Names" text box (Now uses Equal Priority).
    - Added "Set Priority Area (Radius 25)" button: Sets a 25-stud radius priority zone at your character's current position. You can set up to 5 areas.
    - Added "Clear Priority Areas" button: Clears ALL priority zones.
  - Logic:
    - When "Area Priority" is ON and Areas are set, the bot will *constantly* scan ALL defined areas for mobs from your "Priority Mob Names" list.
    - If it finds a priority mob, it will *immediately stop its current action* (even mid-fight) to kill the priority mob.

  *** V42 NEW FEATURE (Retained) ***
  - Added "10s Auto-Ignore: ON/OFF" toggle button to the General tab.
  - This allows you to disable the feature that automatically ignores mobs if they are not killed within 10 seconds.
  - The feature is ON by default.
--]]

--//========================================================================================
--// CONFIGURATION AND CONSTANTS
--//========================================================================================

local CONFIG = {
    FarmSpeed = 0.1,
    -- V44 Update: Priority Area Radius reduced from 50 to 25
    PRIORITY_AREA_RADIUS = 25, 
    -- Other configurations (e.g., jump, skill usage, target names) would go here
    TargetNames = {}, -- Example list
    PriorityMobNames = {}, -- Example list
}

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local MultiGrinder = {}
MultiGrinder.__index = MultiGrinder

--//========================================================================================
--// INITIALIZATION
--//========================================================================================

function MultiGrinder:new()
    local self = setmetatable({
        Enabled = false,
        Mode = "Combat", -- or "Mining"
        IsMinimized = false,
        CurrentTab = "Combat",
        LoopThread = nil,
        TargetMob = nil,
        
        -- V44 Update: Dictionary for O(1) ignored mob checks (mob:Instance -> true)
        IgnoredMobs = {}, 
        
        PriorityAreas = {}, -- Stores {{Position = Vector3, Radius = 25}}
        AutoIgnoreActive = true,
        -- More state variables...
    }, MultiGrinder)
    
    -- Setup initial camera and character properties (rest of the init code)
    -- ...
    return self
end

--//========================================================================================
--// HELPER FUNCTIONS
--//========================================================================================

function MultiGrinder:getHumanoidRootPart()
    local char = Players.LocalPlayer.Character
    if char then
        return char:FindFirstChild("HumanoidRootPart")
    end
    return nil
end

-- V44 Update: Function to check if a mob is currently ignored
function MultiGrinder:isMobIgnored(mob)
    -- Check against the main IgnoredMobs table for any form of long-term ignore
    return self.IgnoredMobs[mob] ~= nil
end

-- V44 Update: Function to add a mob to the ignore list
function MultiGrinder:ignoreMob(mob, permanent)
    -- If permanent (e.g., manual ignore, or failed combat, overriding the 10s temporary ignore)
    if permanent or not self.AutoIgnoreActive then
        self.IgnoredMobs[mob] = true
        print("[Multi-Bot Debug] Permanently ignoring mob: " .. mob.Name)
    else
        -- Logic for 10s auto-ignore (temporary) would be handled elsewhere (e.g. in the combat execution loop)
        print("[Multi-Bot Debug] Mob temporarily ignored (10s): " .. mob.Name)
    end
end

-- V44 Update: Rewritten targeting logic to remove first-to-last priority and respect ignores
function MultiGrinder:getTargetMob(hrp)
    local maxDistance = 200 -- Standard farming distance
    local closestMob = nil
    local minDistance = math.huge
    local targetMobNames = self.TargetNames -- Main farming list
    
    -- Function to check if a mob's name matches any in a list (Equal Priority)
    local function isNameMatch(mobName, nameList)
        for _, name in ipairs(nameList) do
            if mobName:lower():match(name:lower()) then
                return true
            end
        end
        return false
    end

    -- 1. Check Priority Areas (Highest Priority)
    if self.PriorityAreas and #self.PriorityAreas > 0 and #self.PriorityMobNames > 0 then
        local priorityMobs = {}
        
        for _, area in ipairs(self.PriorityAreas) do
            local radius = CONFIG.PRIORITY_AREA_RADIUS -- Now 25
            
            for _, mob in ipairs(Workspace:GetChildren()) do
                -- Check if it's a valid mob/part (assuming your mob checking logic here)
                -- And if it's within the area radius AND matches a priority name
                if mob.Humanoid and mob.Name ~= Players.LocalPlayer.Name and not self:isMobIgnored(mob) then
                    if (mob.HumanoidRootPart.Position - area.Position).Magnitude <= radius and isNameMatch(mob.Name, self.PriorityMobNames) then
                        table.insert(priorityMobs, mob)
                    end
                end
            end
        end

        if #priorityMobs > 0 then
            -- Find the closest priority mob and return it immediately
            local closestPriorityMob = nil
            local minPrioDistance = math.huge
            for _, mob in ipairs(priorityMobs) do
                local dist = (mob.HumanoidRootPart.Position - hrp.Position).Magnitude
                if dist < minPrioDistance then
                    minPrioDistance = dist
                    closestPriorityMob = mob
                end
            end
            if closestPriorityMob then
                return closestPriorityMob
            end
        end
    end

    -- 2. Check Regular Targets (Standard Farming)
    for _, mob in ipairs(Workspace:GetChildren()) do
        if mob.Humanoid and mob.Name ~= Players.LocalPlayer.Name and not self:isMobIgnored(mob) then
            -- V44 Update: Check if mob's name is in the list (Equal Priority for all names)
            if isNameMatch(mob.Name, targetMobNames) then 
                local dist = (mob.HumanoidRootPart.Position - hrp.Position).Magnitude
                if dist <= maxDistance and dist < minDistance then
                    minDistance = dist
                    closestMob = mob
                end
            end
        end
    end
    
    return closestMob
end

-- Placeholder for the rest of your combat logic
function MultiGrinder:executeCombatAction(hrp)
    self.TargetMob = self:getTargetMob(hrp)

    if self.TargetMob and not self:isMobIgnored(self.TargetMob) then
        -- Combat logic (move, attack, use skills)
        print("[Multi-Bot Debug] Attacking: " .. self.TargetMob.Name)
        
        -- After a combat action fails or if the mob evades for too long, 
        -- you should call self:ignoreMob(mob, true) to permanently ignore it.
        -- Example (you would put this in your existing fail state logic):
        -- if combatFailed then self:ignoreMob(self.TargetMob, true) end
    else
        print("[Multi-Bot Debug] No valid target found. Searching...")
    end
end

function MultiGrinder:executeMiningAction(hrp)
    -- Your mining logic here
    print("[Multi-Bot Debug] Executing Mining Action.")
end

-- Placeholder for the setup GUI function (updated radius text)
function MultiGrinder:setupGUI()
    -- Assume GUI initialization here
    print("[Multi-Bot Debug] Initializing GUI elements...")

    -- V44 Update: Reflect new radius in button text
    -- You need to update the button text creation in your actual GUI code:
    -- Old: "Set Priority Area (Radius 50)" 
    -- New: "Set Priority Area (Radius 25)" 
    
    -- ... (Rest of GUI setup)
end

-- Function to handle setting the area, updated with new constant
function MultiGrinder:setPriorityArea(hrp)
    local newArea = {
        Position = hrp.Position,
        Radius = CONFIG.PRIORITY_AREA_RADIUS -- Uses the new 25 value
    }
    
    if #self.PriorityAreas < 5 then
        table.insert(self.PriorityAreas, newArea)
        print(string.format("[Multi-Bot Debug] Priority Area %d set at (%.2f, %.2f, %.2f) with radius %d.", 
            #self.PriorityAreas, hrp.Position.X, hrp.Position.Y, hrp.Position.Z, CONFIG.PRIORITY_AREA_RADIUS))
    else
        print("[Multi-Bot Debug] Max 5 Priority Areas reached.")
    end
end

-- // (Other GUI and Helper functions like getMobStatus, setMinimizedState, restoreCamera etc. would be here)

--//========================================================================================
--// SNIPPET CONTENT START (Context from your upload)
--//========================================================================================

-- (Self-closing function for a button click, e.g. a CloseButton)
-- Assuming the actual screen GUI components are defined before this block

-- Placeholder UI/Flow control functions
local function minimizeScript(self) print("[Multi-Bot Debug] Minimizing...") end
local function restoreCamera(self) print("[Multi-Bot Debug] Restoring Camera...") end

local ScreenGui = {
    CloseButton = {
        MouseButton1Click = {
            Connect = function(callback)
                -- Dummy connect
            end
        }
    }
}
local CloseButton = ScreenGui.CloseButton

function MultiGrinder:setMinimizedState(state)
    -- Logic to change GUI visibility
    print(string.format("[Multi-Bot Debug] Set minimized state: %s", tostring(state)))
end

function MultiGrinder:showTab(tabName)
    -- Logic to show tab
    print(string.format("[Multi-Bot Debug] Showing tab: %s", tabName))
end

-- This section connects UI elements and should be inside a setupGUI-like function
-- If this was part of setupGUI, it should be adjusted:
-- self.MinMaxButton.MouseButton1Click:Connect(function()
--     self:setMinimizedState(not self.IsMinimized)
-- end)

CloseButton.MouseButton1Click:Connect(function()
    if self.LoopThread then task.cancel(self.LoopThread) end
    restoreCamera(self)
    -- ScreenGui:Destroy() -- Assumed destroy
    print("[Multi-Bot Debug] Bot script shut down.")
end)

-- self:setMinimizedState(self.IsMinimized) -- These calls should happen after GUI setup
-- self:showTab(self.CurrentTab)

--//========================================================================================
--// MAIN LOOP
--//========================================================================================

function MultiGrinder:start()
    self:setupGUI() -- Call the updated GUI setup
    print("[Multi-Bot Debug] GUI Initialized. Starting main loop.")
    
    self.LoopThread = task.spawn(function()
        while task.wait(CONFIG.FarmSpeed) do
            if self.Enabled then
                local hrp = self:getHumanoidRootPart()
                
                if not hrp then 
                    continue 
                end
                
                if self.Mode == "Combat" then
                    self:executeCombatAction(hrp) -- This now uses the V44 targeting logic
                elseif self.Mode == "Mining" then
                    self:executeMiningAction(hrp)
                end
            end
        end
    end)
end

--//========================================================================================
--// SCRIPT EXECUTION
--//========================================================================================

pcall(function()
    local bot = MultiGrinder:new()
    bot:start()
end)
